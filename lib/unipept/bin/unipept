#!/usr/bin/env ruby

require 'cri'
require 'faraday'
require 'yaml'
require 'json'

require_relative '../lib/unipept'

class ApiRunner < Cri::CommandRunner

  def initialize(args, opts, cmd)
    super
    host = Unipept::Configuration.new['host']
    if host.nil? || host.empty?
      puts "WARNING: no host has been set, you can set the host with `unipept config host http://localhost:3000/`"
      exit 1
    end
    @url = "#{host}/api/v1/#{mapping[cmd.name]}.json"
  end

  def mapping
    {'pepttotaxa' => 'single', 'pepttolca' => 'lca'}
  end

  def run
    formatter = Unipept::Formatter.new_for_format(options[:format])
    if options[:input]
      peptides = File.readlines(options[:input])
    else
      peptides = STDIN.readlines
    end

    filter = options[:select].split(',') rescue nil

    result = JSON[Faraday.get(@url, :sequences => peptides, :equate_il => options[:equate]).body]

    result.map! {|r| r.select! {|k,v| filter.include? k } } if filter

    result = formatter.format(result)

    if options[:output]
      File.open(options[:output], 'w') do |f|
        f.write result
      end
    else
      puts result
    end
  end
end

root_cmd = Cri::Command.new_basic_root.modify do
  name 'unipept'
  flag :v, :verbose, "verbose mode"
  option :i, :input, "input file", :argument => :required
  option :o, :output, "output file", :argument => :required
  option :f, :format, "output format (Available: #{Unipept::Formatter.available.join "," })", :argument => :required
end

root_cmd.define_command('config') do
  usage 'config attr [value]'

  run do |opts, args, cmd|
    config = Unipept::Configuration.new
    if args.size > 1
      config[args.first] = args[1]
      config.save
    elsif args.size == 1
      puts config[args.first]
    end
  end

end

root_cmd.define_command('pepttotaxa') do
  usage       'pepttotaxa [options]'
  aliases     :s
  summary     'Single Peptide Search'
  description 'Search Unipept for the given peptide and return taxons'

  flag :e, :equate, "equate I and L"
  option :s, :select, "select the attributes", :argument => :required

  runner ApiRunner
end

root_cmd.define_command('pepttolca') do
  usage       'pepttolca [options]'
  aliases     :l
  summary     'Give lowest common ancestor for given peptide'
  description 'Search Unipept for the given peptide and return the lowest common ancestor'

  flag :e, :equate, "equate I and L"
  option :s, :select, "select the attributes", :argument => :required

  runner ApiRunner
end


root_cmd.run(ARGV)
