#!/usr/bin/env ruby

require 'cri'
require 'faraday'
require 'ruby-progressbar'
require 'yaml'
require 'json'
require 'fileutils'

require_relative '../lib/unipept'


class ApiRunner < Cri::CommandRunner

  def initialize(args, opts, cmd)
    super
    host = Unipept::Configuration.new['host']
    if host.nil? || host.empty?
      puts "WARNING: no host has been set, you can set the host with `unipept config host http://localhost:3000/`"
      exit 1
    end
    @url = "#{host}/api/v1/#{mapping[cmd.name]}.json"
  end

  def mapping
    {'pept2taxa' => 'single', 'pept2lca' => 'lca'}
  end

  def read_input
    if options[:input]
      peptides = File.readlines(options[:input])
    else
      peptides = STDIN.readlines
    end

    peptides
  end

  def url_options(sub_part)
    {:sequences => sub_part,
     :equate_il => options[:equate],
     :full_lineage => options[:lineage]}
  end

  def run
    formatter = Unipept::Formatter.new_for_format(options[:format])
    peptides = read_input

    filter = options[:select] rescue nil
    filter = glob_to_regex(filter) if filter

    progress = ProgressBar.create(total: peptides.size, output: $stderr)

    result = []
    peptides.each_slice(10) do |sub_division|

      sub_result = JSON[Faraday.get(@url, url_options(sub_division)).body]

      sub_result.map! {|r| r.select! {|k,v| filter.match k } } if filter

      result << sub_result

      progress.progress += sub_division.size
    end

    download_xml(result)

    result = formatter.format(result)
    if options[:output]
      File.open(options[:output], 'w') do |f|
        f.write result
      end
    else
      puts result
    end
  end

  def download_xml(result)
    if options[:xml]
      File.open(options[:xml] + ".xml", "wb") do |f|
        f.write Faraday.get("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=taxonomy&id=#{result.first.map{|h| h['taxon_id'] }.join(",")}&retmode=xml").body
      end
    end
  end

  private

  def glob_to_regex(glob_string)
    # only implement * -> . for now
    Regexp.new glob_string.gsub("*", ".*")
  end
end

class Taxa2lca < ApiRunner

  def mapping
    {"taxa2lca" => "taxa2lca"}
  end

  def url_options(sub_part)
    {:taxon_ids => sub_part, :full_lineage => options[:lineage]}
  end

end

class Pept2pro < ApiRunner

  def mapping
    {"pept2pro" => "pept2pro"}
  end

  def url_options(sub_part)
    {:sequences => sub_part}
  end

  def download_xml(result)
    if options[:xml]
      FileUtils.mkdir_p(options[:xml])
      result.first.each do |prot|
        File.open(options[:xml] + "/#{prot['uniprot_id']}.xml", "wb") do |f|
          f.write Faraday.get("http://www.uniprot.org/uniprot/#{prot['uniprot_id']}.xml").body
        end
      end
    end
  end

end

root_cmd = Cri::Command.new_basic_root.modify do
  name 'unipept'
  flag :v, :verbose, "verbose mode"
  option :i, :input, "input file", :argument => :required
  option :o, :output, "output file", :argument => :required
  option :f, :format, "output format (available: #{Unipept::Formatter.available.join "," }) (default: #{Unipept::Formatter.default})", :argument => :required
end

root_cmd.define_command('config') do
  usage 'config attr [value]'

  run do |opts, args, cmd|
    config = Unipept::Configuration.new
    if args.size > 1
      config[args.first] = args[1]
      config.save
    elsif args.size == 1
      puts config[args.first]
    end
  end

end

root_cmd.define_command('pept2taxa') do
  usage       'pepttotaxa [options]'
  aliases     :s
  summary     'Single Peptide Search'
  description 'Search Unipept for the given peptide and return taxons'

  flag :e, :equate, "equate I and L"
  option :s, :select, "select the attributes", :argument => :required
  option :l, :lineage, "Show full lineage"
  option :x, :xml, "Download taxonomy from NCBI as xml (specify output filename)", :argument => :required

  runner ApiRunner
end

root_cmd.define_command('pept2lca') do
  usage       'pepttolca [options]'
  aliases     :l
  summary     'Give lowest common ancestor for given peptide'
  description 'Search Unipept for the given peptide and return the lowest common ancestor'

  flag :e, :equate, "equate I and L"
  option :s, :select, "select the attributes", :argument => :required
  option :l, :lineage, "Show full lineage"

  runner ApiRunner
end

root_cmd.define_command('taxa2lca') do
  usage       'taxa2lca [options]'
  aliases     :t
  summary     'Give lowest common ancestor for taxon ids'
  description 'Search Unipept for the given taxon ids and return the lowest common ancestor'

  option :s, :select, "select the attributes", :argument => :required
  option :l, :lineage, "Show full lineage"

  runner Taxa2lca
end

root_cmd.define_command('pept2pro') do
  usage       'pept2pro [options]'
  aliases     :p
  summary     'Give protein information for given peptides'
  description 'Search Unipept for the given peptides and return the lowest common ancestor'

  option :s, :select, "select the attributes", :argument => :required
  option :x, :xml, "download uniprot record in specified directory", :argument => :required

  runner Pept2pro
end

root_cmd.run(ARGV)
