#!/usr/bin/env ruby
require 'typhoeus'
require 'cri'

Signal.trap("PIPE", "EXIT")
Signal.trap("INT", "EXIT")

def get_uniprot_entry(arg, fasta = false)
  resp = Typhoeus.get("http://www.uniprot.org/uniprot/#{arg}.fasta")
  if resp.success?
    if fasta
      puts resp.response_body
    else
      puts resp.response_body.lines.map(&:chomp)[1..-1].join("")
    end
  end
end

root_cmd = Cri::Command.new_basic_root.modify do
  name        'uniprot'
  summary     'Command line interface to Uniprot web services.'
  usage       'uniprot [options]'
  description <<-EOS
  The uniprot command is a command line wrapper around the Uniprot web services. The command expects a list of Uniprot Accession Numbers that are passed

  - as separate command line arguments

  - in one or more text files that are passed as an argument to the -i option

  - to standard input

  The command will give priority to the first way Uniprot Accession Numbers are passed, in the order as listed above. Text files and standard input should have one Uniprot Accession Number per line.

  The uniprot command yields Uniprot records as output.
  EOS
  required :f, :format, "specify output format (available: fasta, plain)"
  run do |opts, args, cmd|
    fasta = opts[:format] == 'fasta'
    iterator = args.empty? ? $stdin.each_line : args
    iterator.each do |pept|
      get_uniprot_entry(pept.chomp, fasta)
    end
  end
end

# run_this runs this command without subcommands! Absolutely needed here
root_cmd.run_this(ARGV)
