#!usr/bin/env ruby

require 'cri'
require 'typhoeus'
require 'yaml'
require 'json'
require 'fileutils'

require_relative '../lib/unipept'

Signal.trap("PIPE", "EXIT")
Signal.trap("INT", "EXIT")

module Unipept
  class Taxa2lca < ApiRunner

    def mapping
      {"taxa2lca" => "taxa2lca"}
    end

    def peptide_iterator(peptides, &block)
      block.call(peptides.to_a, 0)
    end

    def batch_size
      raise "NOT NEEDED FOR TAXA2LCA"
    end

  end

  class Pept2prot < ApiRunner

    def mapping
      {"pept2prot" => "pept2prot"}
    end

    def download_xml(result)
      if options[:xml]
        FileUtils.mkdir_p(options[:xml])
        result.first.each do |prot|
          File.open(options[:xml] + "/#{prot['uniprot_id']}.xml", "wb") do |f|
            f.write Typhoeus.get("http://www.uniprot.org/uniprot/#{prot['uniprot_id']}.xml").response_body
          end
        end
      end
    end

    def batch_size
      10
    end
  end

  class Taxonomy < ApiRunner
    def mapping
      {"taxonomy" => "taxonomy"}
    end
  end
end

root_cmd = Cri::Command.new_basic_root.modify do
  name        'unipept'
  summary     'Command line interface to Unipept web services.'
  usage       'unipept subcommand [options]'
  description <<-EOS
  The unipept subcommands are command line wrappers around the Unipept web services.

  Subcommands that start with pept expect a list of tryptic peptides as input. Subcommands that start with tax expect a list of NCBI Taxonomy Identifiers as input. Input is passed

  - as separate command line arguments

  - in one or more text files that are passed as an argument to the -i option

  - to standard input

  The command will give priority to the first way the input is passed, in the order as listed above. Text files and standard input should have one tryptic peptide or one NCBI Taxonomy Identifier per line.
  EOS
  flag :v, :version, "displays the version"
  flag :q, :quiet, "disable service messages"
  option :i, :input, "read input from file", :argument => :required
  option :o, :output, "write output to file", :argument => :required
  option :f, :format, "define the output format (available: #{Unipept::Formatter.available.join "," }) (default: #{Unipept::Formatter.default})", :argument => :required

  # Configuration options
  option nil, "host", "specify the server running the Unipept web service", argument: :required

  run do |opts, args, cmd|
    if opts[:version]
      puts File.read(File.join(File.dirname(__FILE__), "..", "VERSION"))
    end
  end
end

root_cmd.define_command('config') do
  usage 'config attr [value]'

  run do |opts, args, cmd|
    config = Unipept::Configuration.new
    if args.size > 1
      config[args.first] = args[1]
      config.save
    elsif args.size == 1
      puts config[args.first]
    end
  end

end

root_cmd.define_command('pept2taxa') do
  usage       'pept2taxa [options]'
  aliases     :s
  summary     'Fetch taxa of Uniprot records that match tryptic peptides'
  description <<-EOS
  For each tryptic peptide the unipept pept2taxa command retrieves from Unipept the set of taxa from all Uniprot records whose protein sequence contains an exact matches to the tryptic peptide. The command expects a list of tryptic peptides that are passed

  - as separate command line arguments

  - in one or more text files that are passed as an argument to the -i option

  - to standard input

  The command will give priority to the first way tryptic peptides are passed, in the order as listed above. Text files and standard input should have one tryptic peptide per line.

  The unipept pept2taxa subcommand yields NCBI Taxonomy records as output.
  EOS

  flag :e, :equate, "equate isoleucine (I) and leucine (L) when matching peptides"
  option :s, :select, "select the information fields to return. Selected fields are passed as a comma separated list of field names. Multiple -s (or --select) options may be used.", :argument => :required, :multiple => true
  option :a, :all, "report all information fields of NCBI Taxonomy records available in Unipept. Note that this may have a performance penalty."
  option :x, :xml, "Download the matched records from the NCBI web service as an xml-formatted file (specify output filename)", :argument => :required

  runner Unipept::ApiRunner
end

root_cmd.define_command('pept2lca') do
  usage       'pept2lca [options]'
  aliases     :l
  summary     'Fetch taxonomic lowest common ancestor of Uniprot records that match tryptic peptides.'
  description <<-EOS
  For each tryptic peptide the unipept pept2lca command retrieves from Unipept the lowest common ancestor of the set of taxa from all Uniprot records whose protein sequence contains an exact matches to the tryptic peptide. The lowest common ancestor is based on the topology of the Unipept Taxonomy -- a cleaned up version of the NCBI Taxonomy -- and is itself a record from the NCBI Taxonomy. The command expects a list of tryptic peptides that are passed

   - as separate command line arguments

   - in one or more text files that are passed as an argument to the -i option

   - to standard input

  The command will give priority to the first way tryptic peptides are passed, in the order as listed above. Text files and standard input should have one tryptic peptide per line.

  The unipept pept2lca subcommand yields an NCBI Taxonomy record as output.
  EOS

  flag :e, :equate, "equate isoleucine (I) and leucine (L) when matching peptides"
  option :s, :select, "select the information fields to return. Selected fields are passed as a comma separated list of field names. Multiple -s (or --select) options may be used.", :argument => :required, :multiple => true
  option :a, :all, "report all information fields of NCBI Taxonomy records available in Unipept. Note that this may have a performance penalty."

  runner Unipept::ApiRunner
end

root_cmd.define_command('taxa2lca') do
  usage       'taxa2lca [options]'
  aliases     :t
  summary     'Compute taxonomic lowest common ancestor for given list of taxa.'
  description <<-EOS
  The unipept taxa2lca command computes the lowest common ancestor of a given list of NCBI Taxonomy Identifiers. The lowest common ancestor is based on the topology of the Unipept Taxonomy -- a cleaned up version of the NCBI Taxonomy -- and is itself a record from the NCBI Taxonomy. The command expects a list of NCBI Taxonomy Identifiers that are passed

   - as separate command line arguments

   - in one or more text files that are passed as an argument to the -i option

   - to standard input

  The command will give priority to the first way NCBI Taxonomy Identifiers are passed, in the order as listed above. Text files and standard input should have one NCBI Taxonomy Identifier per line.

  The unipept taxonomy subcommand yields NCBI Taxonomy records as output.
  EOS

  option :s, :select, "select the information fields to return. Selected fields are passed as a comma separated list of field names. Multiple -s (or --select) options may be used.", :argument => :required, :multiple => true
  option :a, :all, "report all information fields of NCBI Taxonomy records available in Unipept. Note that this may have a performance penalty."

  runner Unipept::Taxa2lca
end

root_cmd.define_command('pept2prot') do
  usage       'pept2prot [options]'
  aliases     :p
  summary     'Fetch Uniprot records that match tryptic peptides.'
  description <<-EOS
  For each tryptic peptide the unipept pept2prot command retrieves from Unipept all Uniprot records whose protein sequence contains an exact matches to the tryptic peptide. The command expects a list of tryptic peptides that are passed

  - as separate command line arguments

  - in one or more text files that are passed as an argument to the -i option

  - to standard input

  The command will give priority to the first way tryptic peptides are passed, in the order as listed above. Text files and standard input should have one tryptic peptide per line.

  The unipept pept2prot subcommand yields Uniprot records as output.
  EOS

  flag :e, :equate, "equate isoleucine (I) and leucine (L) when matching peptides"
  option :s, :select, "select the information fields to return. Selected fields are passed as a comma separated list of field names. Multiple -s (or --select) options may be used.", :argument => :required, :multiple => true
  option :x, :xml, "download XML-formatted Uniprot records into the specified download-directory. ", :argument => :required
  flag :a, :all, "report all information fields of Uniprot records available in Unipept. Note that this may have a performance penalty.
"

  runner Unipept::Pept2prot
end

root_cmd.define_command('taxonomy') do
  usage       'taxonomy [options]'
  aliases     :tax
  summary     'Give NCBI taxonomy information on given input taxon ids'
  description 'Returns information for each input taxon id'

  option :s, :select, "select the information fields to return. Selected fields are passed as a comma separated list of field names. Multiple -s (or --select) options may be used.", :argument => :required, :multiple => true
  flag :a, :all, "include all information. WARNING: will take much longer!"

  runner Unipept::Taxonomy
end

root_cmd.run(ARGV)
